@model CEC_SwiftHR.ViewModel.EmployeeViewModel

@{
    ViewBag.Title = "Edit";
}
@{
    IEnumerable<SelectListItem> Cities = ViewBag.City;
    IEnumerable<SelectListItem> Districts = ViewBag.District;
}
<h2>Edit</h2>
<h4>Employee</h4>
<hr />
<a id="editBtn" href="javascript:;" class="btn green-jungle">
    <i class="fa fa-edit"></i>
    Edit
</a>
<a id="deleteBtn" href="javascript:;" class="btn red" data-popout="true" data-toggle="confirmation" data-original-title="確定刪除?">
    <i class="fa fa-trash"></i>
    Delete
</a>
@using (Html.BeginForm("Edit", "Employees", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        @Html.EditorFor(model => model.EmployeeId, new { htmlAttributes = new { @class = "form-control hidden" } })





        <div class="form-group">
            @Html.LabelFor(model => model.PhotoPath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhotoPath, new { htmlAttributes = new { type = "file", @class = "form-control", name = "uploadFile" } })
                <img id="photoPreview" src="@Url.Content("~/images/employees/" + @Model.PhotoPath)" style="max-width:150px" />
                @Html.ValidationMessageFor(model => model.PhotoPath, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeNameEn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeNameEn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmployeeNameEn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control date-picker" } })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdCardNum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdCardNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdCardNum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Gender, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BloodType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BloodType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BloodType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MobilePhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobilePhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobilePhone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CitySelectedValue, Cities, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.District, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DistrictSelectedValue, Districts, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.District, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.AddressLine, "AddressLine", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddressLine, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.District, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ResidentialCity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ResidentialCitySelectedValue, Cities, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ResidentialCity, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.ResidentialDistrict, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ResidentialDistrictSelectedValue, Districts, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ResidentialDistrict, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.ResidentialAddressLine, "AddressLine", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResidentialAddressLine, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResidentialDistrict, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="form-group">
                @Html.LabelFor(model => model.ResidentialAddressId, "ResidentialAddressId", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ResidentialAddressId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ResidentialAddressId, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.PermanentTel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PermanentTel, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PermanentTel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResidentialTel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResidentialTel, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResidentialTel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OnBoardDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OnBoardDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.OnBoardDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmpId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmpId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmpId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsMarried, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.IsMarried, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsMarried, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HasChild, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.HasChild, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.HasChild, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NumberOfChild, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NumberOfChild, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NumberOfChild, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.IsDisability, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.IsDisability, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsDisability, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsAboriginal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.IsAboriginal, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsAboriginal, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.Partial("_EducationPartialView")
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section styles
{
    <link href="~/Content/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" type="text/css">
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Content/assets/pages/scripts/ui-confirmations.min.js" type="text/javascript"></script>
    <script src="~/Content/assets/global/plugins/bootstrap-confirmation/bootstrap-confirmation.min.js" type="text/javascript"></script>
    <script src="~/Content/assets/global/plugins/moment.min.js" type="text/javascript"></script>
    <script src="~/Content/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js" type="text/javascript"></script>
    <script src="~/Content/assets/pages/scripts/components-date-time-pickers.min.js" type="text/javascript"></script>
    <script src="~/Content/assets/global/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js" type="text/javascript"></script>
    <script>
        $('input[type="date"]').attr('type','text');

        $("#deleteBtn").confirmation(
            {
                onConfirm: function (event)
                {
                    var eduIds = [];
                    var inputs = $(".EduIdInput");

                    for (var i = 0; i < inputs.length; i++)
                    {
                        eduIds.push(inputs[i].value);
                    }

                    var dataParams = {
                        id: "@Model.EmployeeId",
                        ids: eduIds
                    };

                    $.ajax({
                        url:"@Url.Action("Delete", "Employees")",
                        data: dataParams,
                        cache: false,
                        type: "POST",
                        success: function (data) {

                            window.location.replace('@Url.Action("Index","Employees")');
                        },
                        error: function (reponse) {
                            debugger;
                            alert("error : " + reponse);
                        }
                    });
                }
            });
        $("#PhotoPath").change(function () {
            readURL(this);
        });

        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#photoPreview').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#CitySelectedValue").change(function (event) {
            var _cityId = event.currentTarget.value;
            $("#DistrictSelectedValue").empty();

            $.ajax({
                url:"@Url.Action("GetDistrictsByCityId", "Employees")",
                data: { cityId: _cityId },
                cache: false,
                type: "POST",
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        $("#DistrictSelectedValue").append('<option value="' + data[i].Value + '">' + data[i].Text + '</option>');
                    }

                },
                error: function (reponse) {
                    debugger;
                    alert("error : " + reponse);
                }
            });
        });
        $("#ResidentialCitySelectedValue").change(function (event) {
            var _cityId = event.currentTarget.value;
            $("#ResidentialDistrictSelectedValue").empty();

            $.ajax({
                url: "@Url.Action("GetDistrictsByCityId","Employees")",
                data: { cityId: _cityId },
                cache: false,
                type: "POST",
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        $("#ResidentialDistrictSelectedValue").append('<option value="' + data[i].Value + '">' + data[i].Text + '</option>');
                    }

                },
                error: function (reponse) {
                    debugger;
                    alert("error : " + reponse);
                }
            });
        });
        $("input").prop('disabled', true);
        $("select").prop('disabled', true);
        $("#editBtn").prop('disabled', false);

        $("#editBtn").click(function () {
            $("input").prop('disabled', false);
            $("select").prop('disabled', false);
        });

    </script>
    <script>
        var rowNumber = 0;
        $(document).ready(function () {

            @foreach (var edu in Model.Educations)
            {
                <text>
                    $('#DegreeTBody').append('<tr>' +
                    '<td style="display:none"><input type="hidden" class="form-control EduIdInput" name="Educations[' + rowNumber + '].EducationId" value="@edu.EducationId" /></td>'+
                    '<td> <input type="text" class="form-control" name="Educations[' + rowNumber + '].SchoolName" value="@edu.SchoolName" /> </td>' +
                    '<td> <input type="text" class="form-control" name="Educations[' + rowNumber + '].Department" value="@edu.Department"> </td>' +
                    '<td> <input type="text" class="form-control" name="Educations[' + rowNumber + '].Drgree"  value="@edu.Drgree"> </td>' +
                    '<td> <input type="text" class="form-control" name="Educations[' + rowNumber + '].StartDate"  value="@edu.StartDate"> </td>' +
                    '<td> <input type="text" class="form-control" name="Educations[' + rowNumber + '].EndDate"  value="@edu.EndDate"> </td>' +
                    '</tr>');
                    rowNumber++;
                </text>
            }
        });
    </script>
}
